version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: medical-appointments-api
    volumes:
      - .:/app
      - /app/node_modules
    ports:
      - "3000:3000"
      - "9229:9229" # para debug
    environment:
      - NODE_ENV=development
      - AWS_ACCESS_KEY_ID=localstack
      - AWS_SECRET_ACCESS_KEY=localstack
      - AWS_DEFAULT_REGION=us-east-1
      - LAMBDA_ENDPOINT=http://localstack:4566
      - AWS_ENDPOINT=http://localstack:4566
    depends_on:
      - localstack
    networks:
      - app-network
    command: npm run start:dev
    # Configuração de reinicialização para desenvolvimento
    restart: unless-stopped
    # Configuração de healthcheck
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    ports:
      - "4566-4599:4566-4599"
    environment:
      - SERVICES=lambda,apigateway,dynamodb,cloudformation,s3,sqs
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - DOCKER_HOST=unix:///var/run/docker.sock
      - LAMBDA_EXECUTOR=docker
      - LAMBDA_REMOTE_DOCKER=false
      - DEFAULT_REGION=us-east-1
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=localstack
      - AWS_SECRET_ACCESS_KEY=localstack
      # Configurações de desempenho
      - LAMBDA_RUNTIME_ENVIRONMENT_TIMEOUT=90
      - LAMBDA_DOCKER_FLAGS=-m 512M
    volumes:
      - "./.localstack:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - app-network
    # Configuração de healthcheck para o LocalStack
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  dynamodb-admin:
    image: aaronshaf/dynamodb-admin
    container_name: dynamodb-admin
    ports:
      - "8001:8001"
    environment:
      - DYNAMO_ENDPOINT=http://localstack:4566
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=localstack
      - AWS_SECRET_ACCESS_KEY=localstack
    depends_on:
      - localstack
    networks:
      - app-network

  # Serviço para monitoramento
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - app-network

volumes:
  grafana-data:

networks:
  app-network:
    driver: bridge

# Configurações de deploy com diferentes ambientes
x-environments: &environments
  development:
    - NODE_ENV=development
    - AWS_ACCESS_KEY_ID=localstack
    - AWS_SECRET_ACCESS_KEY=localstack
  staging:
    - NODE_ENV=staging
    - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
  production:
    - NODE_ENV=production
    - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
